generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  Role                  @default(USER)
  phone                 String?               @unique
  dateOfBirth           DateTime?
  address               String?
  emergencyContact      String?
  preferences           Json?
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  accounts              Account[]
  sessions              Session[]
  gurujiAppointments    Appointment[]         @relation("GurujiAppointments")
  devoteeAppointments   Appointment[]         @relation("DevoteeAppointments")
  consultationSessions  ConsultationSession[] @relation("DevoteeSessions")
  gurujiSessions        ConsultationSession[] @relation("GurujiSessions")
  elderlyFamilyContacts FamilyContact[]       @relation("ElderlyUser")
  familyContactFor      FamilyContact[]       @relation("FamilyContact")
  notifications         Notification[]
  gurujiQueueEntries    QueueEntry[]          @relation("GurujiQueueEntries")
  devoteeQueueEntries   QueueEntry[]          @relation("DevoteeQueueEntries")
  remedyDocuments       RemedyDocument[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Appointment {
  id                  String               @id @default(cuid())
  userId              String
  gurujiId            String?
  date                DateTime
  startTime           DateTime
  endTime             DateTime
  status              AppointmentStatus    @default(BOOKED)
  priority            Priority             @default(NORMAL)
  reason              String?
  notes               String?
  isRecurring         Boolean              @default(false)
  recurringPattern    Json?
  qrCode              String?              @unique
  checkedInAt         DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  guruji              User?                @relation("GurujiAppointments", fields: [gurujiId], references: [id])
  user                User                 @relation("DevoteeAppointments", fields: [userId], references: [id])
  consultationSession ConsultationSession?
  queueEntry          QueueEntry?

  @@map("appointments")
}

model QueueEntry {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  userId        String
  gurujiId      String?
  position      Int
  status        QueueStatus @default(WAITING)
  priority      Priority    @default(NORMAL)
  estimatedWait Int?
  checkedInAt   DateTime
  startedAt     DateTime?
  completedAt   DateTime?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  guruji        User?       @relation("GurujiQueueEntries", fields: [gurujiId], references: [id])
  user          User        @relation("DevoteeQueueEntries", fields: [userId], references: [id])

  @@map("queue_entries")
}

model ConsultationSession {
  id            String           @id @default(cuid())
  appointmentId String           @unique
  devoteeId     String
  gurujiId      String
  startTime     DateTime         @default(now())
  endTime       DateTime?
  duration      Int?
  symptoms      String?
  diagnosis     String?
  notes         String?
  recordings    Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  appointment   Appointment      @relation(fields: [appointmentId], references: [id])
  devotee       User             @relation("DevoteeSessions", fields: [devoteeId], references: [id])
  guruji        User             @relation("GurujiSessions", fields: [gurujiId], references: [id])
  remedies      RemedyDocument[]

  @@map("consultation_sessions")
}

model RemedyTemplate {
  id              String           @id @default(cuid())
  name            String
  type            RemedyType
  category        String
  description     String?
  instructions    String
  dosage          String?
  duration        String?
  language        String           @default("en")
  isActive        Boolean          @default(true)
  tags            String[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  remedyDocuments RemedyDocument[]

  @@map("remedy_templates")
}

model RemedyDocument {
  id                    String              @id @default(cuid())
  consultationSessionId String
  templateId            String
  userId                String
  customInstructions    String?
  customDosage          String?
  customDuration        String?
  pdfUrl                String?
  deliveredAt           DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  consultationSession   ConsultationSession @relation(fields: [consultationSessionId], references: [id])
  template              RemedyTemplate      @relation(fields: [templateId], references: [id])
  user                  User                @relation(fields: [userId], references: [id])

  @@map("remedy_documents")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String
  category    String?
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldData    Json?
  newData    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@map("audit_logs")
}

model FamilyContact {
  id                  String   @id @default(cuid())
  elderlyUserId       String
  familyContactId     String
  relationship        String
  canBookAppointments Boolean  @default(true)
  canViewRemedies     Boolean  @default(true)
  canReceiveUpdates   Boolean  @default(true)
  isActive            Boolean  @default(true)
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  elderlyUser         User     @relation("ElderlyUser", fields: [elderlyUserId], references: [id])
  familyContact       User     @relation("FamilyContact", fields: [familyContactId], references: [id])

  @@unique([elderlyUserId, familyContactId])
  @@map("family_contacts")
}

enum Role {
  USER
  COORDINATOR
  GURUJI
  ADMIN
}

enum AppointmentStatus {
  BOOKED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum QueueStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  LATE_ARRIVAL
}

enum RemedyType {
  HOMEOPATHIC
  AYURVEDIC
  SPIRITUAL
  LIFESTYLE
  DIETARY
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}
